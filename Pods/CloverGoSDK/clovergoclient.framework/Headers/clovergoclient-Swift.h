// Generated by Apple Swift version 4.2 (swiftlang-1000.11.37.1 clang-1000.11.45.1)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if __has_feature(modules)
@import Foundation;
@import ObjectiveC;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="clovergoclient",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

@class CardApplicationIdentifier;

/// AidSelection delegate is used to choose the Application Identifier that needs to be used for the current EMV transaction
SWIFT_PROTOCOL("_TtP14clovergoclient12AidSelection_")
@protocol AidSelection
/// This method needs to be called when the cardholder makes a choice on which Application Identifier he want to use for processing the transaction
/// \param cardApplicationIdentifier An instance of CardApplicationIdentifier which the cardholder chose
///
- (void)selectApplicationIdentifierWithCardApplicationIdentifier:(CardApplicationIdentifier * _Nullable)cardApplicationIdentifier;
@end

typedef SWIFT_ENUM(NSInteger, CLVGoTransactionType, closed) {
  CLVGoTransactionTypeUnknown = 0,
  CLVGoTransactionTypeKeyed = 1,
  CLVGoTransactionTypeAuth = 2,
  CLVGoTransactionTypeManualrefund = 3,
  CLVGoTransactionTypePreauth = 4,
  CLVGoTransactionTypePurchase = 5,
  CLVGoTransactionTypeTokenize = 6,
};


/// Application Identifier (AID).
SWIFT_CLASS("_TtC14clovergoclient25CardApplicationIdentifier")
@interface CardApplicationIdentifier : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull applicationLabel;
@property (nonatomic, readonly, copy) NSString * _Nonnull applicationIdentifier;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

@class ReaderInfo;
enum CardReaderErrorEvent : NSInteger;
enum CardReaderInitializationEvent : NSInteger;

/// Card Reader Delegate that needs to be implemented by the developer to receive reader Initialization events and other important callbacks like onConnected and onDisconnected events
SWIFT_PROTOCOL("_TtP14clovergoclient18CardReaderDelegate_")
@protocol CardReaderDelegate
/// This callback method gets called when a reader is connected
/// <ul>
///   <li>
///     parameters
///     <ul>
///       <li>
///         cardReaderInfo: Returns an instance of ReaderInfo containing the connected readerType, serialNo etc.
///       </li>
///     </ul>
///   </li>
/// </ul>
- (void)onConnectedWithCardReaderInfo:(ReaderInfo * _Nonnull)cardReaderInfo;
/// This callback method gets called when a reader gets disconnected
/// \param cardReaderInfo Returns an instance of ReaderInfo containing the connected readerType, serialNo etc.
///
- (void)onDisconnectedWithCardReaderInfo:(ReaderInfo * _Nonnull)cardReaderInfo;
/// This callback method gets called with an error event when the reader cannot be initialized successfully
/// \param event This is an enum of Card Reader error events that may happen durring card intialization
///
- (void)onErrorWithEvent:(enum CardReaderErrorEvent)event;
/// This callback method get called when the reader is completely initialized and ready to start taking transactions
/// \param cardReaderInfo Returns an instance of ReaderInfo containing the connected readerType, serialNo etc.
///
- (void)onReadyWithCardReaderInfo:(ReaderInfo * _Nonnull)cardReaderInfo;
/// This callback method gets called when the EMV parameters needs to be reset in the reader. All new readers out of the box gets reset when connected for the first time. Developer needs to account for this and show appropriate screens when developing their app
/// \param event This is an enum of Card Reader Initialization Event that occurs when reader that needs to be reset
///
- (void)onReaderResetProgressWithEvent:(enum CardReaderInitializationEvent)event;
/// This callback method get called when tring to discover RP450X Bluetooth readers
/// \param readers Returns a list of readers discovered during bluetooth scan
///
- (void)onCardReaderDiscoveredWithReaders:(NSArray<ReaderInfo *> * _Nonnull)readers;
@optional
/// This callback method get called when an audiojack RP350X reader is plugged in
- (void)onPlugged;
@end

/// Card Reader Error Events are sent when there is an error during initializing the reader
typedef SWIFT_ENUM(NSInteger, CardReaderErrorEvent, closed) {
/// Intialization of the reader failed. Reader cannot be used to take payments at this point
  CardReaderErrorEventInitialization_failed = 0,
/// Unable to retrive EMV configuration parameters. Please check your network connectivity
  CardReaderErrorEventReader_data_not_avaliable = 1,
/// Unable to download the firmware
  CardReaderErrorEventFirmware_download_failed = 2,
/// Failed to update the firmware
  CardReaderErrorEventFirmware_update_failed = 3,
/// Firmware update not supported for the connected reader type
  CardReaderErrorEventFirmware_update_not_supported = 4,
};

/// Card Reader initialization events are sent when the reader needs to be loaded with emv terminal parameters and/or firmware update is required
typedef SWIFT_ENUM(NSInteger, CardReaderInitializationEvent, closed) {
/// Gets triggered when the Application Identifiers and Public keys are cleared from the reader
  CardReaderInitializationEventClear_aid_pk_complete = 0,
/// Gets triggered when Application Identifiers are loaded into the reader
  CardReaderInitializationEventAid_flush_complete = 1,
/// Gets triggered when Public Keys are loaded into the reader
  CardReaderInitializationEventPublic_key_flush_complete = 2,
/// Gets triggered when the Respone DOL’s, Amount DOL’s and Online DOL’s are flushed into the reader
  CardReaderInitializationEventDol_flush_complete = 3,
/// Gets triggered when the Initialization of the reader is complete
/// important:
///
/// For RP350X readers, when the reader update is complete, reader will get disconnected automatically. Need to reconnect the reader using ‘useReader’ method in CloverGo
  CardReaderInitializationEventInitialization_complete = 4,
/// Gets triggered when the Firmware Download Starts
/// important:
///
/// Firmware Update is Applicable only for RP450X readers
/// Make sure you have good network connectivity and have the reader charged
  CardReaderInitializationEventDownloading_firmware = 5,
/// Gets triggered when the Firmware Download is complete
  CardReaderInitializationEventFirware_download_complete = 6,
/// Gets triggered when Firmware Update starts
  CardReaderInitializationEventUpdating_firmware = 7,
/// Gets triggered when the Firmware update is complete.
/// important:
///
/// Do not close the app till you get the ‘initialization_complete’ event
/// Once the firmware is updated, Reader will disconnect and when reconnected again the reader needs to be reloaded with Application Identifiers, Public Keys and DOL’s
  CardReaderInitializationEventFirmware_update_complete = 8,
};

typedef SWIFT_ENUM(NSInteger, CardType, closed) {
  CardTypeVISA = 0,
  CardTypeMC = 1,
  CardTypeDISCOVER = 2,
  CardTypeAMEX = 3,
  CardTypeDINNERS = 4,
  CardTypeJCB = 5,
  CardTypeCHINA_UNION_PAY = 6,
  CardTypeDEFAULT = 7,
};


SWIFT_CLASS("_TtC14clovergoclient11CardUtility")
@interface CardUtility : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@protocol LoggerDelegate;
enum Env : NSInteger;
@class Inventory;
@class CloverGoError;
@class TaxRate;
@class KeyedRequest;
@protocol TransactionDelegate;
@class Order;
@class Refund;
@class Merchant;
@class Transaction;
@class OfflineStats;

/// CloverGo provides an interface to communicate with a RP350X or RP450X reader, and to take payments.
SWIFT_CLASS("_TtC14clovergoclient8CloverGo")
@interface CloverGo : NSObject
/// Set allowAutoConnect = true, if you want to connect to the last connected reader automatically
/// <ul>
///   <li>
///     Default:
///     false
///   </li>
/// </ul>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL allowAutoConnect;)
+ (BOOL)allowAutoConnect SWIFT_WARN_UNUSED_RESULT;
+ (void)setAllowAutoConnect:(BOOL)value;
/// Set overrideDuplicateTransaction = true, if you don’t want to be prompted for duplicate transactions
/// <ul>
///   <li>
///     Default:
///     false
///   </li>
/// </ul>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL overrideDuplicateTransaction;)
+ (BOOL)overrideDuplicateTransaction SWIFT_WARN_UNUSED_RESULT;
+ (void)setOverrideDuplicateTransaction:(BOOL)value;
/// Set overrideAddressVerification = true, if you don’t want to be prompted for AVS failures
/// <ul>
///   <li>
///     Default:
///     false
///   </li>
/// </ul>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL overrideAddressVerification;)
+ (BOOL)overrideAddressVerification SWIFT_WARN_UNUSED_RESULT;
+ (void)setOverrideAddressVerification:(BOOL)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull remoteApplicationID;)
+ (NSString * _Nonnull)remoteApplicationID SWIFT_WARN_UNUSED_RESULT;
+ (void)setRemoteApplicationID:(NSString * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull remoteApplicationVersion;)
+ (NSString * _Nonnull)remoteApplicationVersion SWIFT_WARN_UNUSED_RESULT;
+ (void)setRemoteApplicationVersion:(NSString * _Nonnull)value;
/// Set enableQuickChip = true, if you want to Enable Quick Chip feature.
/// important:
///
/// Not supported in RP350X readers
/// <ul>
///   <li>
///     Defaut:
///     false
///   </li>
/// </ul>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL enableQuickChip;)
+ (BOOL)enableQuickChip SWIFT_WARN_UNUSED_RESULT;
+ (void)setEnableQuickChip:(BOOL)value;
///
+ (void)enableLogs:(BOOL)enable;
/// Enable logs in CloverGo
/// \param enable true or false
///
/// \param loggerDelegate Instance of LoggerDelegate implementation where the logs statements from SDK will be sent to
///
+ (void)enableLogs:(BOOL)enable loggerDelegate:(id <LoggerDelegate> _Nonnull)loggerDelegate;
/// Returns a boolean to indicate if  logging has been enabled in the CloverGo
///
/// returns:
/// A Boolean value
+ (BOOL)isLogsEnabled SWIFT_WARN_UNUSED_RESULT;
/// OfflinePaymentProcessingStarted Notification will be sent when the offline processing has been started
/// important:
///
/// Offline processing will start when the App is in foreground and when there is network connectivity
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSNotification * _Nonnull OfflinePaymentProcessingStarted;)
+ (NSNotification * _Nonnull)OfflinePaymentProcessingStarted SWIFT_WARN_UNUSED_RESULT;
/// OfflinePaymentProcessingCompleted Notification will be sent when the offline processing is complete
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSNotification * _Nonnull OfflinePaymentProcessingCompleted;)
+ (NSNotification * _Nonnull)OfflinePaymentProcessingCompleted SWIFT_WARN_UNUSED_RESULT;
/// OfflinePaymentProcessingSuspended Notification will be sent when the offline processing is suspended
/// important:
///
/// Offline processing will be suspended when the app is put in background
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSNotification * _Nonnull OfflinePaymentProcessingSuspended;)
+ (NSNotification * _Nonnull)OfflinePaymentProcessingSuspended SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
/// Initializes the CloverGo SDK with Access token, API key, Secret and Environment
/// \param accessToken Access token needs to be obtained from Clover via OAuth. Please follow the detailed documentation for more information regarding this.
///
/// \param apiKey Api key provided by the Clover Go Integration team
///
/// \param secret Secret provided by the Clover Go Integration team
///
/// \param env SDK Environment
///
- (void)initializeWithAccessToken:(NSString * _Nonnull)accessToken apiKey:(NSString * _Nonnull)apiKey secret:(NSString * _Nonnull)secret env:(enum Env)env;
/// Initializes the CloverGo SDK with API key, Secret and Environment
/// \param apiKey Api key provided by the Clover Go Integration team
///
/// \param secret Secret provided by the Clover Go Integration team
///
/// \param env SDK Environment
///
- (void)initializeWithApiKey:(NSString * _Nonnull)apiKey secret:(NSString * _Nonnull)secret env:(enum Env)env;
/// Loads the Inventory details from Clover for the given Merchant context
/// \param forceReload By defaut, Inventory Items will be returned from the local data store within the SDK. If the data needs to be fetched from the Clover Cloud, then pass the value ‘true’ (this will also refresh the local cache in the SDK)
///
/// \param success An Array of Inventory items will be returned in the success completion block
///
/// \param failure A CloverGoError will be returned in the failure completion block
///
- (void)loadInventoryWithForceReload:(BOOL)forceReload success:(void (^ _Nonnull)(NSArray<Inventory *> * _Nonnull))success failure:(void (^ _Nonnull)(CloverGoError * _Nonnull))failure;
/// Loads the Tax Rates from Clover for the given Merchant context
/// \param forceReload By defaut, Tax Rates Items will be returned from the local data store within the SDK. If the data needs to be fetched from the Clover Cloud, then pass the value ‘true’ (this will also refresh the local cache in the SDK)
///
/// \param success An Array of TaxRate will be returned in the success completion block
///
/// \param failure A CloverGoError will be returned in the failure completion block
///
- (void)loadTaxesWithForceReload:(BOOL)forceReload success:(void (^ _Nonnull)(NSArray<TaxRate *> * _Nonnull))success failure:(void (^ _Nonnull)(CloverGoError * _Nonnull))failure;
/// Sends the Order Receipt to Email and/or phone number
/// \param orderId Order Id, This will be part of a successful transaction response
///
/// \param email Email to which the receipt url will be sent
///
/// \param phone Phone No to which the receipt url will be sent via SMS
///
- (void)sendReceiptWithOrderId:(NSString * _Nonnull)orderId email:(NSString * _Nullable)email phone:(NSString * _Nullable)phone;
/// Capture the Signature along with Tip. This method should be used when the Gateway Tip Adjust is turned on.
/// \param paymentId Payment Id which is returned as part of successful transaction response
///
/// \param xy An Array of coordinates marking different points of Signature. Refer sample app for reference implementation
///
/// \param tip Tip amount in Cents that needs to be added to the transaction
///
- (void)captureSignatureWithTipWithPaymentId:(NSString * _Nonnull)paymentId xy:(NSArray<NSArray<NSArray<NSNumber *> *> *> * _Nonnull)xy tip:(NSInteger)tip;
/// Captures the Signature for a processed transaction
/// \param paymentId Payment Id which is returned as part of successful transaction response
///
/// \param xy An Array of coordinates marking different points of Signature. Refer sample app for reference implementation
///
- (void)captureSignatureWithPaymentId:(NSString * _Nonnull)paymentId xy:(NSArray<NSArray<NSArray<NSNumber *> *> *> * _Nonnull)xy;
/// Starts processing a Manually Keyed transaction
/// \param keyedRequest KeyedRequest (Refer KeyedRequest documention for more information)
///
/// \param delegate Instance of a TransactionDelegate implementation (Refer TransactionDelegate documentation for more information)
///
- (void)doKeyedTransactionWithKeyedRequest:(KeyedRequest * _Nonnull)keyedRequest delegate:(id <TransactionDelegate> _Nonnull)delegate;
/// Starts processing a Card Reader transaction
/// \param readerInfo Pass the instance of ReaderInfo on which the transaction needs to be started
///
/// \param order An Order object containing the Inventory/Custom Items
///
/// \param delegate Instance of a TransactionDelegate implementation (Refer TransactionDelegate documentation for more information)
///
- (void)doCardReaderTransactionWithReaderInfo:(ReaderInfo * _Nonnull)readerInfo order:(Order * _Nonnull)order delegate:(id <TransactionDelegate> _Nonnull)delegate;
/// Reads the Cards EMV/Swipe parameters
/// \param readerInfo Pass the instance of ReaderInfo on which the transaction needs to be started
///
/// \param delegate Instance of a TransactionDelegate implementation (Refer TransactionDelegate documentation for more information)
///
- (void)doReadCardDataWithReaderInfo:(ReaderInfo * _Nonnull)readerInfo delegate:(id <TransactionDelegate> _Nonnull)delegate;
/// Cancel a card reader transaction that is in progress
/// \param readerInfo Pass the instance of ReaderInfo on which the transaction needs to be started
///
- (void)cancelCardReaderTransactionWithReaderInfo:(ReaderInfo * _Nonnull)readerInfo;
/// Initiates and establishes a connection to a CloverGo reader via audiojack or bluetooth depending on the reader type provided in the ReaderInfo object
/// important:
///
/// For RP450X reader type, this method starts a bluetooth scan for approximately 15 seconds. Scan stops as soon as a RP450X reader is found
/// \param cardReaderInfo An instance of ReaderInfo to which the connection needs to be established
///
/// \param delegate Instance of a CardReaderDelegate implementation (Refer CardReaderDelegate documentation for more information)
///
- (void)useReaderWithCardReaderInfo:(ReaderInfo * _Nonnull)cardReaderInfo delegate:(id <CardReaderDelegate> _Nonnull)delegate;
/// Checks the connectivity for the given ReaderType
/// \param cardReaderInfo An instance of ReaderInfo to check if its connected or not
///
///
/// returns:
///
/// A Boolean to indicate if a reader is connected or not based on the ReaderType provided in the ReaderInfo object
- (BOOL)isConnectedWithCardReaderInfo:(ReaderInfo * _Nonnull)cardReaderInfo SWIFT_WARN_UNUSED_RESULT;
/// Disconnects a Reader
/// \param cardReaderInfo An instance of ReaderInfo that needs to be disconnected
///
- (void)releaseReaderWithCardReaderInfo:(ReaderInfo * _Nonnull)cardReaderInfo;
/// Connects/Pairs a Bluetooth reader
/// \param readerInfo The instance of ReaderInfo object that is returned during reader discovery
///
- (void)connectToBTReaderWithReaderInfo:(ReaderInfo * _Nonnull)readerInfo;
/// Resets the readers terminal confiuration
/// important:
///
/// Use this when the reader is not able to read card emv parameters
/// \param readerInfo An instance of ReaderInfo that needs to be reset
///
- (void)resetReaderWithReaderInfo:(ReaderInfo * _Nonnull)readerInfo;
/// Capture a Pre-Auth transaction
/// \param paymentId Payment Id or Transaction Id associated with the Pre-Auth transaction
///
/// \param amount Total amount that needs to be captured for this transaction in Cents
///
/// \param tipAmount Tip amount in Cents
///
/// \param success Returns boolean on successfully capture
///
/// \param failure Returns CloverGoError via failure completion block
///
- (void)doCapturePreAuthTransactionWithPaymentId:(NSString * _Nonnull)paymentId amount:(NSInteger)amount tipAmount:(NSInteger)tipAmount success:(void (^ _Nonnull)(BOOL))success failure:(void (^ _Nonnull)(CloverGoError * _Nonnull))failure;
/// Close Out call initiates a batch process
/// \param success Returns boolean on successfully initiating the Close Out batch
///
/// \param failure Returns CloverGoError via failure completion block
///
- (void)doCloseOutTransactionWithSuccess:(void (^ _Nonnull)(BOOL))success failure:(void (^ _Nonnull)(CloverGoError * _Nonnull))failure;
/// Refund a Payment Transaction
/// important:
///
/// This method refunds the entire payment amount. If you need to do a partial refund, use the method ‘doRefundTransactionWithAmount’
/// \param paymentId PaymentId or TransactionId that needs to be Voided
///
/// \param success Returns Refund object on successfully adding a tip to a payment via success completion block
///
/// \param failure Returns CloverGoError via failure completion block if the refund fails
///
- (void)doRefundTransactionWithPaymentId:(NSString * _Nonnull)paymentId success:(void (^ _Nonnull)(Refund * _Nonnull))success failure:(void (^ _Nonnull)(CloverGoError * _Nonnull))failure;
/// Refund a Payment Transaction
/// \param paymentId PaymentId or TransactionId that needs to be Voided
///
/// \param amount Amount in Cents that needs to be refunded
///
/// \param success Returns Refund object on successfully adding a tip to a payment via success completion block
///
/// \param failure Returns CloverGoError via failure completion block if the refund fails
///
- (void)doRefundTransactionWithAmountWithPaymentId:(NSString * _Nonnull)paymentId amount:(NSInteger)amount success:(void (^ _Nonnull)(Refund * _Nonnull))success failure:(void (^ _Nonnull)(CloverGoError * _Nonnull))failure;
/// Adding a Tip to a Payment Transaction
/// important:
///
/// Only the first tip is recorded, calling this method to add multiple tip doesnt have any impact even if it returns a success response
/// \param paymentId Payment Id that needs to be Voided
///
/// \param amount Tip amount in Cents
///
/// \param success Returns boolean on successfully adding a tip to a payment via success completion block
///
/// \param failure Returns CloverGoError via failure completion block
///
- (void)doAddTipTransactionWithPaymentId:(NSString * _Nonnull)paymentId amount:(NSInteger)amount success:(void (^ _Nonnull)(BOOL))success failure:(void (^ _Nonnull)(CloverGoError * _Nonnull))failure;
/// Delete an existing Order
/// \param paymentId PaymentId or TransactionId that needs to be Voided
///
/// \param orderId Order Id
///
/// \param voidReason Reason to Void this payment (optional)
///
/// \param success Returns boolean on successful Void of a payment via success completion block
///
/// \param failure Returns CloverGoError via failure completion block if void fails
///
- (void)doVoidTransactionWithPaymentId:(NSString * _Nonnull)paymentId orderId:(NSString * _Nonnull)orderId voidReason:(NSString * _Nullable)voidReason success:(void (^ _Nonnull)(BOOL))success failure:(void (^ _Nonnull)(CloverGoError * _Nonnull))failure;
/// Delete an existing Order
/// \param success Returns boolean on successful deletion of order via success completion block
///
/// \param failure Returns CloverGoError via failure completion block if deleting an order fails
///
- (void)deleteOrderWithOrderId:(NSString * _Nonnull)orderId success:(void (^ _Nonnull)(BOOL))success failure:(void (^ _Nonnull)(CloverGoError * _Nonnull))failure;
/// Get Merchant Information for the given Merchant context
/// \param success Returns Merchant via success completion block
///
/// \param failure Returns CloverGoError via failure completion block
///
- (void)getMerchantInfoWithSuccess:(void (^ _Nonnull)(Merchant * _Nonnull))success failure:(void (^ _Nonnull)(CloverGoError * _Nonnull))failure;
/// Get offline Transaction History
/// \param success An array of Transaction is returned via success completion block
///
- (void)getOfflineTransactionHistoryWithSuccess:(void (^ _Nonnull)(NSArray<Transaction *> * _Nullable))success;
/// Get the Offline Stats
/// \param success Returns OfflineStats via success completion block
///
- (void)getOfflineStatsWithSuccess:(void (^ _Nonnull)(OfflineStats * _Nonnull))success;
/// Rerun Failed Offline Transactions
- (void)reRunFailedOfflineTransactions;
@end


/// CloverGo Error
SWIFT_CLASS("_TtC14clovergoclient13CloverGoError")
@interface CloverGoError : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull code;
@property (nonatomic, readonly, copy) NSString * _Nonnull message;
- (nonnull instancetype)initWithCode:(NSString * _Nonnull)code message:(NSString * _Nonnull)message OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC14clovergoclient10CustomItem")
@interface CustomItem : NSObject
@property (nonatomic, strong) TaxRate * _Nullable taxRate;
@property (nonatomic, copy) NSString * _Nonnull name;
@property (nonatomic) NSInteger price;
@property (nonatomic, copy) NSDate * _Nullable createdDate;
@property (nonatomic) NSInteger quantity;
@property (nonatomic, readonly) NSInteger total;
@property (nonatomic, readonly) NSInteger tax;
- (nonnull instancetype)initWithName:(NSString * _Nonnull)name price:(NSInteger)price quantity:(NSInteger)quantity OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithName:(NSString * _Nonnull)name price:(NSInteger)price quantity:(NSInteger)quantity taxRate:(TaxRate * _Nullable)taxRate createdDate:(NSDate * _Nullable)createdDate;
- (void)updateWithName:(NSString * _Nonnull)name price:(NSInteger)price quantity:(NSInteger)quantity taxRate:(TaxRate * _Nullable)taxRate;
- (void)delete;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, Env, closed) {
  EnvLive = 0,
  EnvDemo = 1,
  EnvSandbox = 2,
  EnvTest = 3,
};

@class ItemCategory;

/// Inventory Item
SWIFT_CLASS("_TtC14clovergoclient9Inventory")
@interface Inventory : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
@property (nonatomic, copy) NSString * _Nullable alternateName;
@property (nonatomic, readonly) NSInteger price;
@property (nonatomic, readonly, copy) NSString * _Nullable priceType;
@property (nonatomic) NSInteger stockCount;
@property (nonatomic, copy) NSArray<TaxRate *> * _Nullable taxRates;
@property (nonatomic, copy) NSArray<ItemCategory *> * _Nullable categories;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC14clovergoclient13InventoryItem")
@interface InventoryItem : NSObject
@property (nonatomic, strong) Inventory * _Nonnull item;
@property (nonatomic) NSInteger quantity;
@property (nonatomic, readonly) NSInteger total;
@property (nonatomic, readonly) NSInteger tax;
- (nonnull instancetype)initWithInventory:(Inventory * _Nonnull)inventory quantity:(NSInteger)quantity OBJC_DESIGNATED_INITIALIZER;
- (void)updateWithQuantity:(NSInteger)quantity;
- (void)delete;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC14clovergoclient12ItemCategory")
@interface ItemCategory : NSObject
@property (nonatomic, copy) NSString * _Nonnull id;
@property (nonatomic, copy) NSString * _Nonnull name;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC14clovergoclient12KeyedRequest")
@interface KeyedRequest : NSObject
- (nonnull instancetype)initWithCardNumber:(NSString * _Nonnull)cardNumber expDate:(NSString * _Nonnull)expDate cvv:(NSString * _Nonnull)cvv order:(Order * _Nonnull)order OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithCardNumber:(NSString * _Nonnull)cardNumber expDate:(NSString * _Nonnull)expDate cvv:(NSString * _Nonnull)cvv order:(Order * _Nonnull)order zipCode:(NSString * _Nullable)zipCode streetAddress:(NSString * _Nullable)streetAddress cardPresent:(BOOL)cardPresent;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

@class OfflineSettings;

SWIFT_CLASS("_TtC14clovergoclient8Merchant")
@interface Merchant : NSObject
@property (nonatomic, copy) NSString * _Null_unspecified id;
@property (nonatomic, copy) NSString * _Nullable name;
@property (nonatomic, copy) NSString * _Nullable mccCode;
@property (nonatomic, copy) NSArray<NSString *> * _Nullable features;
@property (nonatomic, strong) OfflineSettings * _Nullable offlineSettings;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, MerchantPropertyType, closed) {
  MerchantPropertyTypeSupportsAuths = 0,
  MerchantPropertyTypeSupportsPreAuths = 1,
  MerchantPropertyTypeSupportsSales = 2,
  MerchantPropertyTypeSupportsVaultCards = 3,
  MerchantPropertyTypeSupportsManualRefunds = 4,
  MerchantPropertyTypeSupportsVoids = 5,
  MerchantPropertyTypeSupportsTipAdjust = 6,
};


SWIFT_CLASS("_TtC14clovergoclient15OfflineSettings")
@interface OfflineSettings : NSObject
@property (nonatomic) BOOL enabled;
@property (nonatomic) NSInteger maxDaysAllowedOffline;
@property (nonatomic) NSInteger totalPaymentsLimit;
@property (nonatomic) NSInteger perPaymentLimit;
@property (nonatomic) NSInteger promptThreshold;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC14clovergoclient12OfflineStats")
@interface OfflineStats : NSObject
@property (nonatomic) NSInteger noOfDaysOffline;
@property (nonatomic) NSInteger totalAmount;
@property (nonatomic) NSInteger totalTransactionCount;
@property (nonatomic) NSInteger failedTransactionCount;
@property (nonatomic) NSInteger pendingTransactionCount;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, OfflineTransactionState, closed) {
  OfflineTransactionStateUnknown = 0,
  OfflineTransactionStateInprogress = 1,
  OfflineTransactionStatePending = 2,
  OfflineTransactionStateFailed = 3,
};


SWIFT_CLASS("_TtC14clovergoclient5Order")
@interface Order : NSObject
@property (nonatomic, copy) NSString * _Nullable id;
@property (nonatomic, copy) NSArray<CustomItem *> * _Nonnull customItems;
@property (nonatomic, copy) NSArray<InventoryItem *> * _Nonnull inventoryItems;
@property (nonatomic) NSInteger tip;
@property (nonatomic, copy) NSString * _Nullable externalPaymentId;
@property (nonatomic) NSInteger customTax;
@property (nonatomic) enum CLVGoTransactionType transactionType;
@property (nonatomic, copy) NSString * _Nullable note;
@property (nonatomic) BOOL quickMode;
@property (nonatomic, readonly) NSInteger total;
@property (nonatomic, readonly) NSInteger subTotal;
@property (nonatomic) NSInteger tax;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (void)addCustomItemWithItem:(CustomItem * _Nonnull)item;
- (void)addInventoryItemWithItem:(InventoryItem * _Nonnull)item;
@end


/// ProceedOnError delegate is used to continue or cancel a transaction when specific error conditions arise
SWIFT_PROTOCOL("_TtP14clovergoclient14ProceedOnError_")
@protocol ProceedOnError
/// This method needs to be called when the merchant wants to proceed or cancel a transaction
/// \param value A Boolean value
/// <ul>
///   <li>
///     true to continue with transaction
///   </li>
///   <li>
///     false to cancel the transaction
///   </li>
/// </ul>
///
- (void)proceedWithValue:(BOOL)value;
@end

enum CardReaderType : NSInteger;

SWIFT_CLASS("_TtC14clovergoclient10ReaderInfo")
@interface ReaderInfo : NSObject
@property (nonatomic) NSInteger batteryPercentage;
@property (nonatomic, copy) NSString * _Nullable serialNumber;
@property (nonatomic) BOOL connected;
@property (nonatomic, readonly) enum CardReaderType readerType;
@property (nonatomic, copy) NSString * _Nullable bluetoothId;
@property (nonatomic, copy) NSString * _Nullable bluetoothName;
@property (nonatomic, copy) NSString * _Nullable readerName;
@property (nonatomic, copy) NSString * _Nullable firmwareVersion;
- (nonnull instancetype)initWithReaderType:(enum CardReaderType)readerType serialNumber:(NSString * _Nullable)serialNumber OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, CardReaderType, closed) {
  CardReaderTypeRP350 = 0,
  CardReaderTypeRP450 = 1,
};

@class NSDate;

SWIFT_CLASS("_TtC14clovergoclient6Refund")
@interface Refund : NSObject
@property (nonatomic, readonly, copy) NSString * _Null_unspecified id;
@property (nonatomic, readonly, copy) NSString * _Null_unspecified orderId;
@property (nonatomic, readonly) NSInteger amount;
@property (nonatomic, readonly) NSInteger tax;
@property (nonatomic, readonly, strong) NSDate * _Null_unspecified createdTime;
@property (nonatomic, readonly, strong) NSDate * _Null_unspecified clientCreatedTime;
@property (nonatomic, readonly, copy) NSString * _Null_unspecified paymentId;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC14clovergoclient7TaxRate")
@interface TaxRate : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
@property (nonatomic, readonly) double rate;
@property (nonatomic, readonly) BOOL isDefault;
- (nonnull instancetype)initWithId:(NSString * _Nonnull)id name:(NSString * _Nonnull)name rate:(double)rate isDefault:(BOOL)isDefault OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC14clovergoclient11Transaction")
@interface Transaction : NSObject
@property (nonatomic, readonly) NSInteger amount;
@property (nonatomic, readonly, copy) NSString * _Null_unspecified orderId;
@property (nonatomic, readonly, copy) NSString * _Null_unspecified paymentId;
@property (nonatomic, readonly, copy) NSDate * _Null_unspecified createdTime;
@property (nonatomic, readonly, copy) NSDate * _Nullable lastPaymentTime;
@property (nonatomic, readonly, copy) NSString * _Null_unspecified last4;
@property (nonatomic, readonly) BOOL offline;
@property (nonatomic, readonly, copy) NSString * _Nullable failureReason;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class TransactionResult;
enum TransactionErrorEvent : NSInteger;
enum TransactionEvent : NSInteger;

/// Transaction Delegate that needs to be implemented by the developer to receive transaction events, success or failure responses.
/// important:
///
/// Ideally the implementation of this delegate needs to be a singleton
SWIFT_PROTOCOL("_TtP14clovergoclient19TransactionDelegate_")
@protocol TransactionDelegate
/// Success response is returned via this callback method. TransactionResult contains the Order Id, Payment Id which is required to do the secondary transactions
/// \param transactionResponse An instance of TransactionResult is returned
///
- (void)onTransactionResponseWithTransactionResponse:(TransactionResult * _Nonnull)transactionResponse;
/// When a transaction fails error response is returned via this callback method.
- (void)onErrorWithError:(CloverGoError * _Nonnull)error;
/// This delegate method is called when a transaction error happens which can be continued with the authorization of the merchant.
/// \param event This is a enum with possible transaction error events
///
/// \param proceedOnErrorDelegate This is a delegate implementation which the merchant/developer needs to call to proceed with the transaction or cancel (void) the transaction
///
- (void)proceedOnErrorWithEvent:(enum TransactionErrorEvent)event proceedOnErrorDelegate:(id <ProceedOnError> _Nonnull)proceedOnErrorDelegate;
/// If a card supports multipe application identifiers, this list will be sent via this delegate.
/// \param cardApplicationIdentifiers A list of Application Identifiers(AID) supported by the card
///
/// \param delegate This is a delegate implementation of AidSelection. Based on the user selection, the selected AID needs to be sent via this delegate.
///
- (void)onAidMatchWithCardApplicationIdentifiers:(NSArray<CardApplicationIdentifier *> * _Nonnull)cardApplicationIdentifiers delegate:(id <AidSelection> _Nonnull)delegate;
/// Transaction Progress Events are sent via this delegate
/// \param event This is a enum of Transaction events
///
- (void)onProgressWithEvent:(enum TransactionEvent)event;
@optional
/// This is an optional delegate method that need not be implemented for regular transaction processing. This only needs to be implemented if you are interested in getting the Card EMV Data and you need to call doReadCardData in CloverGo
/// \param data This is map of different emv parameters
///
- (void)onReadCardDataResponseWithData:(NSDictionary<NSString *, NSString *> * _Nonnull)data;
@end

/// Transaction Error Events get triggered when merchant has the oppurtunity to proceed or cancel with the transaction
typedef SWIFT_ENUM(NSInteger, TransactionErrorEvent, closed) {
/// Gets triggered Address Verfication failed for Manual Keyed transactions
  TransactionErrorEventAvs_failure = 0,
/// Gets triggered when the same card is used for same amount within a short interval of time
  TransactionErrorEventDuplicate_transaction = 1,
/// Get triggered when the device is offline or slow network
  TransactionErrorEventOffline = 2,
/// Gets triggered when the order amount exceeds the threshold limit set by the merchant
  TransactionErrorEventOffline_threshold_limit_exceeded = 3,
/// Gets triggered when the transaction is partially authorized
  TransactionErrorEventPartial_auth = 4,
/// Gets triggered when CVV verfication failed
  TransactionErrorEventCvv_mismatch = 5,
};

/// Transaction Events are sent from the time a transaction is initiated till a success or failure response is returned
typedef SWIFT_ENUM(NSInteger, TransactionEvent, closed) {
/// Gets triggered when Card if Swiped
  TransactionEventCard_swiped = 0,
/// Gets triggered when a Contactless card is tapped (includes Apple pay, Android Pay, etc.)
  TransactionEventCard_tapped = 1,
/// Gets triggered when a card is not swiped properly. User is allowed to retry swiping the same card
  TransactionEventSwipe_failed = 2,
/// Gets triggered when a chip card is swiped. User needs to insert the Chip card instead of swiping
  TransactionEventEmv_card_swiped_error = 3,
/// Gets triggered when a chip card cannot be read. At this time user can Swipe the chip card
  TransactionEventEmv_dip_failed_3_attempts = 4,
/// Gets triggered when Chip card is not inserted properly. User is allowed to retry inserting the same chip card
  TransactionEventEmv_card_dip_failed = 5,
/// Gets triggered when a chip card is inserted
  TransactionEventEmv_card_inserted = 6,
/// Gets triggered when a chip card is removed from the reader
  TransactionEventEmv_card_removed = 7,
/// Gets triggered when the reader cannot read emv parameters from a contactless card. User can retry the action.
  TransactionEventContactless_failed_try_again = 8,
/// Gets triggered when the reader cannot read the emv parameters. User needs to try inserting the chip card.
  TransactionEventContactless_failed_try_contact = 9,
/// Get triggered for contactless transaction like Apple Pay/Android Pay. Cardholder needs to look at their phone for further action
  TransactionEventPlease_see_phone = 10,
/// Gets triggered when the reader detects multiple contactless cards within the NFC range
  TransactionEventMultiple_contactless_cards_detected = 11,
/// Gets triggered when Card Reader transaction is initiated
  TransactionEventSwipe_dip_tap_card = 12,
/// Gets triggered when the Chip Card needs to be removed from the reader
  TransactionEventRemove_card = 13,
/// Gets triggered when the transaction is processing
  TransactionEventProcessing_transaction = 14,
};


SWIFT_CLASS("_TtC14clovergoclient17TransactionResult")
@interface TransactionResult : NSObject
@property (nonatomic, copy) NSString * _Null_unspecified orderId;
@property (nonatomic, copy) NSString * _Null_unspecified paymentId;
@property (nonatomic, copy) NSString * _Nullable status;
@property (nonatomic) NSInteger amountCharged;
@property (nonatomic) NSInteger taxAmount;
@property (nonatomic) NSInteger tipAmount;
@property (nonatomic, strong) NSDate * _Nullable transactionDate;
@property (nonatomic, copy) NSString * _Nullable cvmResult;
@property (nonatomic, copy) NSString * _Nullable cardType;
@property (nonatomic, copy) NSString * _Nullable mode;
@property (nonatomic, copy) NSString * _Nullable maskedCardNo;
@property (nonatomic, copy) NSString * _Nullable transactionType;
@property (nonatomic, copy) NSString * _Nullable authCode;
@property (nonatomic, copy) NSString * _Nullable cardHolderName;
@property (nonatomic, copy) NSString * _Nullable expirationDate;
@property (nonatomic, copy) NSString * _Nullable token;
@property (nonatomic, copy) NSString * _Nullable externalPaymentId;
@property (nonatomic, copy) NSString * _Nullable applicationIdentifier;
@property (nonatomic) BOOL offline;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
